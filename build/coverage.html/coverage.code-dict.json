{"/home/travis/build/npmtest/node-npmtest-docker-cmd/test.js":"/* istanbul instrument in package npmtest_docker_cmd */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-docker-cmd/lib.npmtest_docker_cmd.js":"/* istanbul instrument in package npmtest_docker_cmd */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_docker_cmd = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_docker_cmd = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-docker-cmd/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-docker-cmd && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_docker_cmd */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_docker_cmd\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_docker_cmd.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_docker_cmd.rollup.js'] =\n            local.assetsDict['/assets.npmtest_docker_cmd.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_docker_cmd.__dirname + '/lib.npmtest_docker_cmd.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-docker-cmd/node_modules/docker-cmd/index.js":"module.exports = require(\"./lib/docker-cmd\");\n\nmodule.exports.Manager = require(\"./lib/docker-cmd-manager\");","/home/travis/build/npmtest/node-npmtest-docker-cmd/node_modules/docker-cmd/lib/docker-cmd.js":"'use strict';\n\nvar child_process = require('child_process');\n\n/**\n * This is a DockerCmd representing \"docker\" command line\n * @constructor\n */\nfunction DockerCmd() {\n}\n\n/**\n * @callback DockerCmd~callback\n * @param {number} dockerProcessExitCode - the docker process exit code (0 if all was OK)\n */\n\n/**\n * Execute the given <code>commandName</code> with the given <code>dockerOptions</code> and <code>commandOptions</code>.\n * @param {string} commandName\n * @param {Options} commandOptions\n * @param {Object} dockerOptions\n * @param {DockerCmd~callback} callback\n */\nDockerCmd.prototype.executeCommand = function(commandName, commandOptions, dockerOptions, callback) {\n    // put all options in an array to give to \"spawn\" later\n    var cmdOptions = ['docker'];\n\n    // first the docker options to pass before the docker command\n    appendOptions(cmdOptions, dockerOptions);\n    // then the docker command\n    cmdOptions.push(commandName);\n    // and finally the command options with potentially final args (using the '_' field)\n    appendOptions(cmdOptions, commandOptions);\n\n    var dockerProcess = child_process.spawn('/usr/bin/env', cmdOptions, {stdio: 'inherit'});\n    dockerProcess.on('close', callback);\n};\n\n/**\n * @param {string} commandName\n * @return {function(this:DockerCmd, Options, Object, DockerCmd~callback)}\n * @private\n */\nDockerCmd.prototype._createDefaultCommand = function(commandName) {\n    var self = this;\n    /**\n     * @param {Options} commandOptions\n     * @param {Object} dockerOptions\n     * @param {DockerCmd~callback} callback\n     */\n    return function(commandOptions, dockerOptions, callback) {\n        self.executeCommand(commandName, commandOptions, dockerOptions, callback);\n    }\n};\n\n/// Declare all the docker commands\n[\n    'attach',\n    'build',\n    'commit',\n    'cp',\n    'diff',\n    'events',\n    'export',\n    'history',\n    'images',\n    'import',\n    'info',\n    'inspect',\n    'kill',\n    'load',\n    'login',\n    'logout',\n    'logs',\n    'port',\n    'pause',\n    'ps',\n    'pull',\n    'push',\n    'restart',\n    'rm',\n    'run',\n    'save',\n    'search',\n    'start',\n    'stop',\n    'tag',\n    'top',\n    'unpause',\n    'version',\n    'wait'\n].forEach(function (commandName) {\n        DockerCmd.prototype[commandName] = DockerCmd.prototype._createDefaultCommand(commandName);\n    });\n\n/**\n * Append each option from the given <code>fromOptions</code> to the given\n * <code>options</code> array, flattening them to pass them later as parameters to a\n * sub call process.\n * @param {string[]} options\n * @param {Options} fromOptions\n */\nfunction appendOptions(options, fromOptions) {\n    function pushOption(optionName, optionValue) {\n        var valueDefined = optionValue !== null && optionValue !== undefined;\n        if (optionName.length === 1) {\n            // simple letter option\n            options.push('-' + optionName);\n            if (valueDefined) {\n                options.push(optionValue);\n            }\n        } else {\n            // full option name\n            options.push('--' + optionName + (valueDefined ? '=' + optionValue : ''));\n        }\n    }\n    for (var optionName in fromOptions) {\n        if (fromOptions.hasOwnProperty(optionName) && optionName !== '_') {\n            var optionValue = fromOptions[optionName];\n            if (Array.isArray(optionValue)) {\n                // we have multiple values for the same option, let's iterate on each\n                optionValue.forEach(function (iOptionValue) {\n                    pushOption(optionName, iOptionValue);\n                });\n            } else {\n                pushOption(optionName, optionValue);\n            }\n        }\n    }\n    // now append the \"_\" which are not \"options\" but args\n    if (fromOptions && fromOptions._) {\n        [].concat(fromOptions._).forEach(function(arg) {\n           options.push(arg);\n        });\n    }\n}\n\nmodule.exports = DockerCmd;","/home/travis/build/npmtest/node-npmtest-docker-cmd/node_modules/docker-cmd/lib/docker-cmd-manager.js":"'use strict';\n\nvar DockerCmd = require('./docker-cmd');\nvar fs = require('fs');\nvar path = require('path');\nvar util = require('util');\nvar extend = require('extend');\n\n/**\n * This class manages the DockerCmd and handles dockerdesc.json\n * @constructor\n * @param {string} [dockerdescPath='./dockerdesc.json'] - Path to `dockerdesc.json` file or parent dir\n */\nfunction DockerCmdManager(dockerdescPath) {\n    dockerdescPath = dockerdescPath || './dockerdesc.json';\n\n    if (!fs.existsSync(dockerdescPath)) {\n        throw new Error(util.format('The path \"%s\" does not exists.', dockerdescPath));\n    }\n    /** @type {string} */\n    this.dockerdescDir = path.dirname(dockerdescPath);\n\n    var dockerdescPathStat = fs.statSync(dockerdescPath);\n    if (dockerdescPathStat.isDirectory()) {\n        this.dockerdescDir = dockerdescPath;\n        dockerdescPath = path.join(dockerdescPath, 'dockerdesc.json');\n    }\n    /** @type {Dockerdesc} */\n    var dockerdescContent = fs.readFileSync(dockerdescPath);\n    try {\n        this.dockerdesc = JSON.parse(dockerdescContent);\n    } catch (err) {\n        throw new Error('Problem in the dockerdesc.json file format.\\n' + err.stack);\n    }\n}\n\nDockerCmdManager.prototype.build = _dockerCommandBuilder('build', ['t', 'tag'],\n    /** @type {DockerCmdManager~CommandHandler} */ function(commandName, descriptionTarget, descriptionOptions, commandOptions, dockerOptions, finalDescription, dockerdescName, callback) {\n        // getting the Dockerfile path and parent dir\n        var dockerfilePath = finalDescription.path || (commandOptions._ || [])[0] || descriptionTarget;\n        if (path.resolve(dockerfilePath) !== path.normalize(dockerfilePath)) { // checking if absolute path, thanks to http://stackoverflow.com/a/24225816/535203\n            // this is not an absolute path let's prepend dockerdesc.json dir\n            dockerfilePath = path.join(this.dockerdescDir, dockerfilePath);\n        }\n        if (!fs.existsSync(dockerfilePath)) {\n            throw new Error(util.format('The path \"%s\" defined for image name \"%s\" does not exists.', dockerfilePath, descriptionTarget));\n        }\n        var dockerfileDirPath;\n        var dockerfilePathStat = fs.statSync(dockerfilePath);\n        if (dockerfilePathStat.isDirectory()) {\n            // this path defines actually the directory to the Dockerfile\n            dockerfileDirPath = dockerfilePath;\n            dockerfilePath = path.join(dockerfilePath, 'Dockerfile');\n        } else if (dockerfilePathStat.isFile()) {\n            // this path correctly points to the Dockerfile, let's take its parent as dir path\n            dockerfileDirPath = path.dirname(dockerfilePath);\n        }\n        // checking whether to build its parent or not\n        if (finalDescription.buildParent) {\n            // read the Dockerfile, looking for the \"FROM\" docker directive & check if this is described in the dockerdesc\n\n            var dockerfileContent = fs.readFileSync(dockerfilePath);\n            var fromRe = /^\\s*from\\s*(\\S*)/i;\n            var fromMatch = fromRe.exec(dockerfileContent);\n            if (fromMatch) {\n                var parentImageName = fromMatch[1];\n                // looking for that name in descriptions\n                var parentLookedupDescription = this._lookupDescription('build', parentImageName, ['t', 'tag']);\n\n                if (parentLookedupDescription) {\n                    // found the build description, let's build it\n                    console.log(util.format('Found \"%s\" as a valid parent image to build before building \"%s\".', parentImageName, descriptionTarget));\n                    var self = this;\n                    this.build(parentImageName, descriptionOptions, commandOptions, dockerOptions, function(exitCode) {\n                        if (!exitCode) {\n                            // Parent image was correctly built, let's build now this image\n                            self._computeOptionsThenBuild(dockerfileDirPath, descriptionTarget, descriptionOptions, commandOptions, dockerOptions, finalDescription, dockerdescName, callback);\n                        }\n                    });\n                    return;\n                }\n            }\n        }\n        this._computeOptionsThenBuild(dockerfileDirPath, descriptionTarget, descriptionOptions, commandOptions, dockerOptions, finalDescription, dockerdescName, callback);\n    });\n\nDockerCmdManager.prototype._computeOptionsThenBuild = function (dockerfilePath, descriptionTarget, descriptionOptions, commandOptions, dockerOptions, finalDescription, dockerdescName, callback) {\n    // now compute all the build options\n    /** @type {BuildOptions} */\n    var buildOptions = finalDescription.options || {};\n    if (finalDescription.buildTagFromBuildName && typeof buildOptions.tag === 'undefined' && typeof buildOptions.t === 'undefined') {\n        // current tag is not defined, and option buildTagFromBuildName is set, let's add the buildName as a tag\n        buildOptions.tag = descriptionTarget;\n    }\n    // set the argument for docker build to be the path to the Dockerfile\n    buildOptions._ = [dockerfilePath];\n    // replace it in the finalDescription because it is this parameter that is used by _defaultCommandHandler\n    finalDescription.options = buildOptions;\n    console.log('Building \"'+descriptionTarget+'\"');\n    _defaultCommandHandler('build', descriptionTarget, descriptionOptions, commandOptions, dockerOptions, finalDescription, dockerdescName, callback);\n};\n\nDockerCmdManager.prototype.run = _dockerCommandBuilder('run', ['name'],\n    /** @type {DockerCmdManager~CommandHandler} */ function(commandName, descriptionTarget, descriptionOptions, commandOptions, dockerOptions, finalDescription, dockerdescName, callback) {\n        var runOptions = finalDescription.options || {};\n        runOptions._ = runOptions._ || [];\n\n        if (finalDescription.useRunName && typeof runOptions.name === 'undefined') {\n            runOptions.name = descriptionTarget;\n        }\n        if (runOptions._.length < 1) {\n            runOptions._.push(finalDescription.image || descriptionTarget);\n        }\n        if (finalDescription.command && runOptions._.length === 1) {\n            runOptions._ = runOptions._.concat(finalDescription.command);\n        }\n        // replace it in the finalDescription because it is this parameter that is used by _defaultCommandHandler\n        finalDescription.options = runOptions;\n        // TODO handle dependencies between containers, and check if the image exists before running it\n        _defaultCommandHandler(commandName, descriptionTarget, descriptionOptions, commandOptions, dockerOptions, finalDescription, dockerdescName, callback);\n    });\n\n\nDockerCmdManager.prototype._defaultDescriptions = {\n    run: {\n        useRunName: true\n    },\n    build: {\n        buildTagFromBuildName: true,\n        buildParent: true\n    }\n};\n\n/**\n * @param {string} commandName - Docker command name\n * @param {string} descriptionTarget\n * @param {string[]} commandOptionsMappingToAName - command options name which refers to a potential descriptionTarget\n * @return {{dockerdescName: string, description: Description}}\n * @private\n */\nDockerCmdManager.prototype._lookupDescription = function(commandName, descriptionTarget, commandOptionsMappingToAName) {\n    // First, look directly at the descriptions in the dockerdesc\n    var dockerdescForThatCommand = this.dockerdesc[commandName] || {};\n    var description = dockerdescForThatCommand[descriptionTarget];\n    var dockerdescName = descriptionTarget;\n    // If not found, try to search for that description with its name field\n    if (!description && commandOptionsMappingToAName) {\n        for (dockerdescName in dockerdescForThatCommand) {\n            /** @type {Description} */\n            var iDescription = dockerdescForThatCommand[dockerdescName];\n            var optionNameValue = null;\n            commandOptionsMappingToAName.forEach(function(optionName) {\n                optionNameValue = optionNameValue || (iDescription.options && iDescription.options[optionName]);\n            });\n            if (optionNameValue === descriptionTarget) {\n                // we have a match\n                description = iDescription;\n                break;\n            }\n        }\n    }\n    if (!description) {\n        return null;\n    } else {\n        return {\n            dockerdescName: dockerdescName,\n            description: description\n        };\n    }\n};\n\n/**\n * @callback DockerCmdManager~CommandHandler\n * @param {string} commandName - Docker command name\n * @param {string} descriptionTarget\n * @param {Object} descriptionOptions - Original description options overrides\n * @param {Options} commandOptions - Original command options\n * @param {Object} dockerOptions - Original docker options\n * @param {Description} finalDescription - Found and enriched description\n * @param {string} dockerdescName - Name of the found description\n * @param {DockerCmd~callback} callback\n */\n\n/**\n * @param {string} commandName - Docker command name\n * @param {string[]} commandOptionsMappingToAName - command options name which refers to a potential descriptionTarget\n * @param {DockerCmdManager~CommandHandler} commandHandler\n * @private\n */\nfunction _dockerCommandBuilder(commandName, commandOptionsMappingToAName, commandHandler) {\n    /**\n     *\n     * @param {string} descriptionTarget\n     * @param {Object} descriptionOptions - overrides from Description\n     * @param {Options} commandOptions\n     * @param {Object} dockerOptions\n     * @param {DockerCmd~callback} callback\n     * @private\n     */\n    return function(descriptionTarget, descriptionOptions, commandOptions, dockerOptions, callback) {\n        // the callback is always the last argument\n        switch (arguments.length) {\n            case 2:\n                callback = descriptionOptions;\n                descriptionOptions = undefined;\n                break;\n            case 3:\n                callback = commandOptions;\n                commandOptions = undefined;\n                break;\n            case 4:\n                callback = dockerOptions;\n                dockerOptions = undefined;\n        }\n        // Now will create the final description : beginning from defaults, append the fields from the \"default\" template, then all the templates from the given\n        // <code>description</code>, then the fields of the description, and finally the given commandOptions & dockerOptions\n        var finalDescription = extend(true, {}, this._defaultDescriptions[commandName]); // copy defaults\n        var templates = (this.dockerdesc.templates || {})[commandName] || {};\n        function applyTemplate(template) {\n            if (template) {\n                extend(true, finalDescription, template);\n            }\n        }\n        // Apply templates beginning with `default`\n        applyTemplate(templates.default);\n        // Look directly at the descriptions in the dockerdesc\n        var lookup = this._lookupDescription(commandName, descriptionTarget, commandOptionsMappingToAName);\n        var dockerdescName = descriptionTarget;\n        if (lookup) {\n            var description = lookup.description;\n            dockerdescName = lookup.dockerdescName;\n            var descriptionTemplates = description.templates;\n            if (descriptionTemplates) {\n                [].concat(descriptionTemplates).forEach(function (templateName) {\n                    var template = templates[templateName];\n                    if (!template) {\n                        throw new Error(util.format('%s template \"%s\" is missing', commandName, templateName));\n                    } else {\n                        applyTemplate(template);\n                    }\n                });\n            }\n            // Apply all fields from given description\n            applyTemplate(description);\n        } else {\n            console.warn(util.format('Warn: couldn\\'t find the %s description named \"%s\"', commandName, descriptionTarget));\n        }\n        // And finally, the options passed from the command line\n        applyTemplate(descriptionOptions);\n        applyTemplate({dockerOptions: dockerOptions, options: commandOptions});\n\n        commandHandler.call(this, commandName, descriptionTarget, descriptionOptions, commandOptions, dockerOptions, finalDescription, dockerdescName, callback);\n    }\n}\n\n/**\n * @type {DockerCmdManager~CommandHandler}\n * @private\n */\nfunction _defaultCommandHandler(commandName, descriptionTarget, descriptionOptions, commandOptions, dockerOptions, finalDescription, dockerdescName, callback) {\n    new DockerCmd().executeCommand(commandName, finalDescription.options, finalDescription.dockerOptions, callback);\n}\n\n/**\n * @param {string} commandName - Docker command name\n * @param {string[]} [commandOptionsMappingToAName] - command options name which refers to a potential descriptionTarget\n */\nfunction _defaultDockerCommandBuilder(commandName, commandOptionsMappingToAName) {\n    return _dockerCommandBuilder(commandName, commandOptionsMappingToAName, _defaultCommandHandler);\n}\n\n/// copy default commands if not already exists\nObject.getOwnPropertyNames(DockerCmd.prototype).forEach(function(dockerCmdPropertyName) {\n    var dockerCmdProperty = DockerCmd.prototype[dockerCmdPropertyName];\n    if (typeof dockerCmdProperty === 'function' && !DockerCmdManager.prototype[dockerCmdPropertyName]) {\n        // let's define the not yet defined function linked to corresponding DockerCmd function\n        DockerCmdManager.prototype[dockerCmdPropertyName] = _defaultDockerCommandBuilder(dockerCmdPropertyName);\n    }\n});\n\nmodule.exports = DockerCmdManager;","/home/travis/build/npmtest/node-npmtest-docker-cmd/node_modules/docker-cmd/bin/docker-cm.js":"#!/usr/bin/env node\n'use strict';\n\nvar dockerCM = require('../lib/docker-cm'); // inspired by http://yahooeng.tumblr.com/post/75054690857/code-coverage-for-executable-node-js-scripts\ndockerCM({\n    stdin: process.stdin,\n    stdout: process.stdout,\n    stderr: process.stderr,\n    argv: process.argv\n}, function(exitStatus) {\n    process.exit(exitStatus);\n});","/home/travis/build/npmtest/node-npmtest-docker-cmd/node_modules/docker-cmd/lib/docker-cm.js":"'use strict';\n\nvar DockerCmdManager = require('./docker-cmd-manager');\n\nvar parseArgs = require('minimist'); // thanks to http://stackoverflow.com/a/24638042/535203\nvar util = require('util');\nvar M = require('mstring');\n\n/**\n * @param {{stdin: stream, stdout: stream, stderr: stream, argv: string[]}} pProcess\n */\nfunction dockerCM(pProcess, callback) { // inspired by http://yahooeng.tumblr.com/post/75054690857/code-coverage-for-executable-node-js-scripts\n    //TODO replace all console.log by pProcess.stdout.write(message+'\\n');\n\n    var dockerCmName = require('path').basename(pProcess.argv[1]);\n\n    var usage = util.format(M(function() {\n/***\n%s executes the given docker command, reading arguments from the given dockerdesc file and the given options and args.\n\nUsage: %s [options] [dockerOptions] <commandName> [descriptionOptions] <descriptionTarget> [commandOptions] [commandArgs]\n\nOptions:\n-h, --help               output usage information\n-V, --version            output the version number\n-C, --dockerdesc <PATH>  Specify the path to the dockerdesc file. Defaults to <./dockerdesc.json>\n\nDockerOptions:      All the options you want to pass to docker command before the command name\n\nCommandName:        The docker command name to execute\n\nDescriptionOptions: Options depending on the command, overriding the ones from the dockerdesc\n\nDescriptionTarget:  Name of the target to read from the dockerdesc\n\nCommandOptions:     All the options to override from the dockerdesc file\n\nCommandArgs:        The args to pass to the docker command, after the command options, overriding those described in the dockerdesc file\n***/\n    }), dockerCmName, dockerCmName);\n\n    function help(exitStatus) {\n        console.log(usage);\n        callback(exitStatus);\n    }\n    var dockerOptions = parseArgs(pProcess.argv.slice(2), {stopEarly: true});\n    if (dockerOptions.h || dockerOptions.help) {\n        return help(0);\n    } else if (dockerOptions.V || dockerOptions.version) {\n        console.log(require('../package.json').version);\n    }\n\n    if (!dockerOptions._ || dockerOptions._.length < 2) {\n        console.error('Must at least have <commandName> AND <descriptionTarget>');\n        return help(1);\n    } else {\n        var commandName = dockerOptions._[0];\n        var dockerdesc = dockerOptions.C || dockerOptions.dockerdesc;\n        var dockerCmdManager = new DockerCmdManager(dockerdesc);\n        var commandFunction = dockerCmdManager[commandName];\n        if (typeof commandFunction !== 'function') {\n            console.error(util.format('\"%s\" command doesn\\'t exist.', commandName));\n            return help(2);\n        } else {\n            var descriptionOptions = parseArgs(dockerOptions._.slice(1), {stopEarly: true});\n            // for those options, we have to convert from regular command arg (using \"-\") to camelCase\n            Object.getOwnPropertyNames(descriptionOptions).forEach(function (optionName) {\n                var optionValue = descriptionOptions[optionName];\n                // to camelCase\n                var camelCaseOptionName = optionName.toLowerCase().replace(/-(.)/g, function(match, group1) { // thanks to http://stackoverflow.com/a/10425344/535203\n                    return group1.toUpperCase();\n                });\n                delete descriptionOptions[optionName];\n                descriptionOptions[camelCaseOptionName] = optionValue;\n            });\n            var descriptionTarget = (descriptionOptions._ || [])[0];\n            if (!descriptionTarget) {\n                console.error('Must at least have <descriptionTarget>');\n                return help(3);\n            } else {\n                var commandOptions = parseArgs(descriptionOptions._.slice(1), {stopEarly: true});\n                delete dockerOptions._; // not a docker option\n                delete dockerOptions.C; // not a docker option\n                delete dockerOptions.dockerdesc; // not a docker option\n                commandFunction.call(dockerCmdManager, descriptionTarget, descriptionOptions, commandOptions, dockerOptions, function(dockerProcessExitCode) {\n                    return callback(dockerProcessExitCode);\n                });\n            }\n        }\n    }\n}\n\nmodule.exports = dockerCM;","/home/travis/build/npmtest/node-npmtest-docker-cmd/node_modules/docker-cmd/lib/typedefs.js":"'use strict';\n\n/**\n * dockerdesc.json file description\n * @typedef {Object.<string, Object.<string, Description>>} Dockerdesc\n * @property {Templates} templates - Templates\n * @property {BuildDescriptions} build - The build descriptions\n * @property {RunDescriptions} run - The run descriptions\n */\n\n/**\n * Templates description.\n * @typedef {Object.<string, Object.<string, Description>>} Templates\n * @property {BuildDescriptions} build - The build templates\n * @property {RunDescriptions} run - The run templates\n */\n\n/**\n * Generic command description.\n * @typedef {Object} Description\n * @property {string|string[]} templates - The templates to inherit from\n * @property {Object} dockerOptions - Options to pass to <code>docker<code> before the command name\n * @property {Options} options - Options to pass to <code>docker<code> after the command name (therefore these are the command options)\n */\n\n/**\n * Docker command options.\n * @typedef {Object} Options\n * @property {string|string[]} _ - Arguments to pass after the command options\n */\n\n/**\n * Build descriptions.\n * @typedef {Object.<string, BuildDescription>} BuildDescriptions\n */\n\n/**\n * Build description.\n * @typedef {Object} BuildDescription\n * @extends {Description}\n * @property {string} path - Path to the Dockerfile parent dir or path to the Dockerfile (relative to the dockerdesc.json file)\n * @property {boolean} [buildParent=true] - Whether to build parent or not\n * @property {boolean} [buildTagFromBuildName=true] - Whether to automatically add a \"-tag\" for the build command from the name of the build description\n * @property {BuildOptions} options - Build options\n */\n\n/**\n * @typedef {Object} BuildOptions\n * @extends {Options}\n * @property {string} tag - Repository name (and optionally a tag) to be applied to the resulting image in case of success\n * @property {string} t - Alias for <code>tag</code> property\n */\n\n/**\n * Run descriptions.\n * @typedef {Object.<string, RunDescription>} RunDescriptions\n */\n\n/**\n * Run description.\n * @typedef {Object} RunDescription\n * @extends {Description}\n * @property {string} image - Image name to run\n * @property {string|string[]} command - The command and its args\n * @property {boolean} [useRunName=true] - Whether to automatically add a \"--name\" for the run command from the name of the run description\n * @property {RunOptions} options - Run options\n */\n\n/**\n * @typedef {Object} RunOptions\n * @extends {Options}\n * @property {string} name - Assign a name to the container\n */"}